buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge', name: 'srgutils', version: '0.4.1'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: forgegradle_version
    }
}

apply plugin: 'java'

import fcw.tasks.*

import java.util.stream.Collectors

println "MC: ${minecraft_version}, Forge: ${forge_version}, MCP mappings: ${mappings_version} on channel ${mappings_channel}"

allprojects {
    ext {
        // Defines dependencies which will be exported into the workspace for the javadocs
        SOURCES = [
                "forge": "net.minecraftforge:forge:"
        ] as LinkedHashMap

        DOCS_DIR = rootProject.file('src/docs')
        DOC_FILE_EXTENSION = '.json'
    }
}

task writeDocs(group: 'javadocs') {
    description 'Write out doc files for all source sets'
}

task clearSources(group: 'javadocs') {
    description 'Clears source folder for all source sets'
}

task copySources(group: 'javadocs') {
    shouldRunAfter clearSources
    description 'Copy sources from respective artifacts for all source sets'
}

task removeComments(group: 'javadocs') {
    shouldRunAfter copySources
    description 'Remove javadoc comments from source files for all source sets'
}

task applyDocs(group: 'javadocs', dependsOn: removeComments) {
    description 'Apply javadocs from doc files for all source sets'
}

task setup(group: 'javadocs', dependsOn: [clearSources, copySources, applyDocs]) {
    description 'Sets up the javadocs workspace'
}

task assembleJavadocs(type: Javadoc, group: 'javadocs') {
    description 'Assembles the javadocs from all source sets'
    destinationDir project.file('out')
    title "FCW: Javadocs"
    //source project.files('src/extra/')

    def opt = options.header("Forge (${minecraft_version}-${forge_version}; mappings ${mappings_channel}-${mappings_version})")
    opt.docTitle "FCW: Javadocs for Forge ${minecraft_version}-${forge_version}"
    opt.windowTitle "FCW: Javadocs [${minecraft_version}]"
    opt.groupsFile project.file("src/groups.txt")
    opt.optionFiles project.file("src/options.txt")
    opt.stylesheetFile project.file("src/style.css")
    opt.docFilesSubDirs true

    doLast {
        project.copy {
            from project.file("src/extra")
            into project.file('out')
        }
    }
}

project(':workspace') {
    apply plugin: 'net.minecraftforge.gradle'

    minecraft {
        mappings channel: mappings_channel, version: mappings_version
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    }

    afterEvaluate {
        def mcDeps = configurations.minecraft.incoming.resolutionResult.allDependencies.collect { it.selected.id }

        SOURCES.entrySet().stream().forEach { sourceEntry ->
            String sourceSetName = sourceEntry.key
            def pattern = sourceEntry.value
            def matchingDeps = mcDeps.stream().filter { it.displayName.startsWith pattern }.collect(Collectors.toSet())
            if (matchingDeps.size() == 0) {
                logger.warn("Source pattern '{} -> {}' has no matching dependencies, skipping", sourceSetName, pattern)
                return
            } else if (matchingDeps.size() > 1) {
                logger.warn("Source '{} -> {}' has more than 1 dependency, skipping: {}", sourceSetName, pattern, matchingDeps)
                return
            }
            def matchingDep = matchingDeps[0]
            logger.lifecycle("- Source set '{}' for artifact '{}'", sourceSetName, matchingDep)

            SourceSet sourceSet = sourceSets.create(sourceSetName)

            def config = configurations.maybeCreate(sourceSet.implementationConfigurationName)
            config.canBeResolved(true)
            configurations.minecraft.dependencies.forEach {
                dependencies.add(sourceSet.implementationConfigurationName, it)
            }

            assembleJavadocs {
                classpath += configurations.minecraft.incoming.files
                source sourceSet.java.srcDirs[0]
            }

            def writeDocsTask = project.getTasks().create("write" + sourceSetName.capitalize() + "Docs", MakeDocs.class)
            writeDocs.dependsOn writeDocsTask
            writeDocsTask.configure {
                it.group 'javadocs'
                it.description "Write out doc files for source set '${sourceSetName}'"
                it.docsDir = DOCS_DIR
                it.configuration = config
                it.sourcesDir = sourceSet.java.srcDirs[0]
                it.docFileExtension = DOC_FILE_EXTENSION
            }

            def clearSourcesTask = project.getTasks().create("clear" + sourceSetName.capitalize() + "Sources", Delete.class)
            clearSources.dependsOn clearSourcesTask
            clearSourcesTask.configure {
                it.group 'javadocs'
                it.description "Clears source folder for source set '${sourceSetName}'"
                it.delete sourceSet.java.srcDirs[0]
            }

            def copySourcesTask = project.getTasks().create("copy" + sourceSetName.capitalize() + "Sources", CopySources.class)
            copySources.dependsOn copySourcesTask
            copySourcesTask.configure {
                it.group 'javadocs'
                it.description "Copy sources from artifact ${matchingDep} for source set '${sourceSetName}'"
                it.shouldRunAfter clearSourcesTask
                it.artifact = matchingDep
                it.destDir = sourceSet.java.srcDirs[0]
            }

            def removeCommentsTask = project.getTasks().create("remove" + sourceSetName.capitalize() + "Comments", RemoveComments.class)
            removeComments.dependsOn removeCommentsTask
            removeCommentsTask.configure {
                it.group 'javadocs'
                it.description "Remove javadoc comments from source files for source set '${sourceSetName}'"
                it.shouldRunAfter copySourcesTask
                it.sourcesDir = sourceSet.java.srcDirs[0]
                it.configuration = config
            }

            def applyDocsTask = project.getTasks().create("apply" + sourceSetName.capitalize() + "Docs", ApplyDocs.class)
            applyDocs.dependsOn applyDocsTask
            applyDocsTask.configure {
                it.group 'javadocs'
                it.description "Apply javadocs from doc files for source set '${sourceSetName}'"
                it.dependsOn removeCommentsTask
                it.docsDir = DOCS_DIR
                it.configuration = config
                it.sourcesDir = sourceSet.java.srcDirs[0]
                it.docFileExtension = DOC_FILE_EXTENSION
            }
        }
    }
}