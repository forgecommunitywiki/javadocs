/**
 * @class net.minecraftforge.client.event.ClientPlayerNetworkEvent
 * Fired on the client for different connectivity events.
 * See the various subclasses to listen for specific events.
 *
 * @see ClientPlayerNetworkEvent.LoggedInEvent
 * @see ClientPlayerNetworkEvent.LoggedOutEvent
 * @see ClientPlayerNetworkEvent.RespawnEvent
 */

/**
 * @fn public PlayerController ClientPlayerNetworkEvent::getController()
 * Returns the \ref PlayerController of the client player, or \c null if it does not exist.
 *
 * If \ref ClientPlayerNetworkEvent#getPlayer() returns \c null, then this method also returns \c null.
 *
 * @return The client-side player controller, may be \c null
 */

/**
 * @fn public ClientPlayerEntity ClientPlayerNetworkEvent::getPlayer()
 * Returns the client-side player instance, or \c null if it does not exist.
 *
 * @return The client player instance, may be \c null
 */

/**
 * @fn public NetworkManager ClientPlayerNetworkEvent::getNetworkManager()
 * Returns the client-side network connection manager, or \c null if it does not exist.
 *
 * @return The network connection manager, may be \c null
 */

/**
 * @class net.minecraftforge.client.event.ClientPlayerNetworkEvent.LoggedInEvent
 * Fired when the client player logs in to the server.
 * When this event is fired, the player should be initialized at that point in time.
 *
 * \ref ClientPlayerNetworkEvent#getController(), \ref ClientPlayerNetworkEvent#getPlayer(),
 * and \ref ClientPlayerNetworkEvent#getNetworkManager() are guaranteed to never return \c null in this event.
 *
 * This event is not \link Cancelable cancellable\endlink, and does not \link HasResult have a result\endlink.
 *
 * This event is fired on the \link MinecraftForge#EVENT_BUS main Forge event bus\endlink,
 * only on the \link LogicalSide#CLIENT logical client\endlink.
 *
 * @see ClientHooks#firePlayerLogin(PlayerController, ClientPlayerEntity, NetworkManager)
 */

/**
 * @class net.minecraftforge.client.event.ClientPlayerNetworkEvent.LoggedOutEvent
 * Fired when the player logs out.
 * This event may also fire when a new integrated server is being created.
 *
 * This event is not \link Cancelable cancellable\endlink, and does not \link HasResult have a result\endlink.
 *
 * This event is fired on the \link MinecraftForge#EVENT_BUS main Forge event bus\endlink,
 * only on the \link LogicalSide#CLIENT logical client\endlink.
 *
 * @see ClientHooks#firePlayerLogout(PlayerController, ClientPlayerEntity)
 */

/**
 * @class net.minecraftforge.client.event.ClientPlayerNetworkEvent.RespawnEvent
 * Fired when the player object respawns, such as dimension changes.
 *
 * \ref ClientPlayerNetworkEvent.RespawnEvent#getNewPlayer() returns the same player instance as
 * \ref ClientPlayerNetworkEvent#getPlayer(). \ref ClientPlayerNetworkEvent#getController() ,
 * \ref ClientPlayerNetworkEvent#getPlayer(), and \ref ClientPlayerNetworkEvent#getNetworkManager()
 * are guaranteed to never return \c null in this event.
 *
 * This event is not \link Cancelable cancellable\endlink, and does not \link HasResult have a result\endlink.
 *
 * This event is fired on the \link MinecraftForge#EVENT_BUS main Forge event bus\endlink,
 * only on the \link LogicalSide#CLIENT logical client\endlink.
 *
 * @see ClientHooks#firePlayerRespawn(PlayerController, ClientPlayerEntity, ClientPlayerEntity, NetworkManager)
 */

    /**
     * @fn public ClientPlayerEntity RespawnEvent::getOldPlayer()
     * Returns the old \ref ClientPlayerEntity instance that existed before the respawn.
     *
     * @return The previous player instance
     */

    /**
     * @fn public ClientPlayerEntity RespawnEvent::getNewPlayer()
     * Returns the new \ref ClientPlayerEntity instance that will replace the old instance, after the respawn event.
     *
     * @return The newly created player instance
     */